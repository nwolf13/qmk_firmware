// Determine the current tap dance state
int cur_dance (qk_tap_dance_state_t *state) {
  if (state->count == 1) {
    if (!state->pressed) {
      return SINGLE_TAP;
    } else {
      return SINGLE_HOLD;
    }
  } else if (state->count == 2) {
    return DOUBLE_TAP;
  }
  else return 8;
}

// Initialize tap structure associated with example tap dance key
static tap tap_dance_state = {
  .is_press_action = true,
  .state = 0
};

// Functions that control what our tap dance key does
void code_finished (qk_tap_dance_state_t *state, void *user_data) {
  tap_dance_state.state = cur_dance(state);
  switch (tap_dance_state.state) {
    case SINGLE_TAP:
      tap_code16(LCTL(KC_W));
      break;
    case SINGLE_HOLD:
      register_mods(MOD_BIT(KC_LSFT));
      break;
    case DOUBLE_TAP:
      // check to see if the layer is already set
      if (layer_state_is(_CODE)) {
        // if already set, then switch it off
        layer_off(_CODE);
      } else {
        // if not already set, then switch the layer on
        layer_on(_CODE);
      }
      break;
  }
}

void code_reset (qk_tap_dance_state_t *state, void *user_data) {
  // If the key was held down and now is released then switch off the layer
  if (tap_dance_state.state==SINGLE_HOLD) {
      unregister_mods(MOD_BIT(KC_LSFT));
  }
  tap_dance_state.state = 0;
}

// Associate our tap dance key with its functionality
qk_tap_dance_action_t tap_dance_actions[] = {
  [CODE] = ACTION_TAP_DANCE_FN_ADVANCED_TIME(NULL, code_finished, code_reset, 125),
};

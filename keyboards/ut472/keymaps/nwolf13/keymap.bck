#include QMK_KEYBOARD_H

enum layers {
  _QWERTY,
  _LOWER,
  _RAISE,
  _ALTGR,
  _RGB,
  _NUMPAD,
  _MACRO
};

enum keycodes {
  LOWER = SAFE_RANGE,
  RAISE
};

typedef struct {
  bool is_press_action;
  int state;
} tap;

enum {
  SINGLE_TAP = 1,
  SINGLE_HOLD = 2,
  DOUBLE_TAP = 3,
  DOUBLE_HOLD = 4,
  DOUBLE_SINGLE_TAP = 5, //send two single taps
  TRIPLE_TAP = 6,
  TRIPLE_HOLD = 7
};

//Tap dance enums
enum {
  SFT_CAP_PLUS = 0,
  TD_N_NY,
  L1,
  L2,
  SOME_OTHER_DANCE
};

int cur_dance (qk_tap_dance_state_t *state);

//for the x tap dance. Put it here so it can be used in any keymap
void lsft_finished (qk_tap_dance_state_t *state, void *user_data);
void lsft_reset (qk_tap_dance_state_t *state, void *user_data);
void L1_finished (qk_tap_dance_state_t *state, void *user_data);
void L1_reset (qk_tap_dance_state_t *state, void *user_data);
void L2_finished (qk_tap_dance_state_t *state, void *user_data);
void L2_reset (qk_tap_dance_state_t *state, void *user_data);

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {

  /* QWERTY
   * ,-------------------------------------------------------------------------.
   * | Esc |  Q  |  W  |  E  |  R  |  T  |  Y  |  U  |  I  |  O  |  P  |Bspace |
   * |-------------------------------------------------------------------------+
   * | Ctrl |  A  |  S  |  D  |  F  |  G  |  H  |  J  |  K  |  L  |  Ã‘  | ENT  |
   * |-------------------------------------------------------------------------+
   * | Shift |  Z  |  X  |  C  |  V  |  B  |  N  |  M  |  ,  |  .  |  -  |RSFT |
   * |-------------------------------------------------------------------------+
   * |  L1 | TAB | Gui | Alt |RAISE |   Space   |LOWER | RAlt| RGUI| RCTL|  L2 |
   * `-------------------------------------------------------------------------'
   */

[_QWERTY] = LAYOUT(
 KC_GESC, KC_Q, KC_W, KC_E, KC_R, KC_T, KC_Y, KC_U, KC_I, KC_O, KC_P, KC_BSPC,
 LCTL_T(KC_TAB), KC_A, KC_S, KC_D, KC_F, KC_G, KC_H, KC_J, KC_K, KC_L, KC_QUOT, KC_ENT,
 TD(SFT_CAP_PLUS), KC_Z, KC_X, KC_C, KC_V, KC_B, TD(TD_N_NY), KC_M, KC_COMM, KC_DOT, KC_SLSH, KC_RSPC,
 TD(L1), KC_TAB, KC_LGUI, KC_LALT, RAISE, KC_SPC, LOWER, LM(_ALTGR,MOD_LCTL|MOD_LALT), KC_APP, KC_RCTL, TD(L2)
),

[_LOWER] = LAYOUT(
 KC_GRV, KC_1, KC_2, KC_3, KC_4, KC_5, KC_6, KC_7, KC_8, KC_9, KC_0, KC_DEL,
 KC_EXLM, KC_AT, KC_HASH, KC_DLR, KC_PERC, KC_CIRC, KC_AMPR, KC_ASTR, KC_LPRN, KC_RPRN, KC_UNDS, KC_PLUS,
 KC_LSFT, KC_MINS, KC_EQL, KC_LBRC, KC_RBRC, KC_NUHS, KC_TRNS, KC_TRNS, KC_TRNS, KC_INS, KC_HOME, KC_PGUP,
 KC_LCTL, KC_TAB, GUI_OFF, GUI_ON, KC_TRNS, KC_TRNS, KC_TRNS, KC_RALT, KC_DEL, KC_END, KC_PGDN
),

[_RAISE] = LAYOUT(
 KC_F1, KC_F2, KC_F3, KC_F4, KC_F5, KC_F6, KC_F7, KC_F8, KC_F9, KC_F10, KC_F11, KC_F12,
 KC_NO, KC_BTN1, KC_MS_U, KC_BTN2, KC_WH_U, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO,
 KC_NO, KC_MS_L, KC_MS_D, KC_MS_R, KC_WH_D, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_UP, KC_NO,
 KC_NO, KC_NO, KC_NO, KC_NO, KC_TRNS, KC_NO, KC_TRNS, KC_NO, KC_LEFT, KC_DOWN, KC_RGHT
),

[_ALTGR] = LAYOUT(
 KC_GRV, KC_1, KC_2, KC_3, KC_4, KC_5, KC_6, KC_NO, KC_NO, KC_LBRC, KC_RBRC, KC_NO,
 KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_QUOT, KC_NUHS, KC_NO,
 KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO,
 KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, LM(_ALTGR,MOD_LCTL|MOD_LALT), KC_NO, KC_NO, KC_NO
),

[_RGB] = LAYOUT(
 RGB_TOG, RGB_MOD, RGB_HUI, RGB_SAI, RGB_VAI, KC_NO, KC_NO, KC_NO, KC_PSCR, KC_SLCK, KC_PAUS, RESET,
 KC_NO, RGB_RMOD, RGB_HUD, RGB_SAD, RGB_VAD, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, NK_ON,
 KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_VOLU, KC_MUTE,
 TD(L1), KC_NO, KC_NO, KC_NO, KC_NO, KC_MPLY, KC_NO, KC_NO, KC_MPRV, KC_VOLD, KC_MNXT
),

[_NUMPAD] = LAYOUT(
 KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NLCK, KC_P7, KC_P8, KC_P9, KC_PSLS, KC_NO,
 KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_P4, KC_P5, KC_P6, KC_PAST, KC_NO,
 KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_P1, KC_P2, KC_P3, KC_PMNS, KC_NO,
 KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_P0, KC_PDOT, KC_PENT, KC_PPLS, TD(L2)
),

[_MACRO] = LAYOUT(
  _______, _______, _______, KC_LSFT, KC_LGUI, KC_TILD, KC_INS,  KC_HOME, KC_UP,   KC_END,  KC_BSPC, _______,
  _______, KC_LALT, KC_SPC,  _______, KC_FIND,KC_AGAIN, KC_PGUP, KC_LEFT, KC_DOWN, KC_RGHT, _______, _______,
  _______, KC_UNDO, KC_CUT,  KC_COPY, KC_PASTE,KC_GRV,  KC_PGDN, KC_DEL,  _______, _______, _______, _______,
  _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______
),
};

int cur_dance (qk_tap_dance_state_t *state) {
  if (state->count == 1) {
    if (state->interrupted || !state->pressed)  return SINGLE_TAP;
    //key has not been interrupted, but they key is still held. Means you want to send a 'HOLD'.
    else return SINGLE_HOLD;
  }
  else if (state->count == 2) {
    /*
     * DOUBLE_SINGLE_TAP is to distinguish between typing "pepper", and actually wanting a double tap
     * action when hitting 'pp'. Suggested use case for this return value is when you want to send two
     * keystrokes of the key, and not the 'double tap' action/macro.
    */
    if (state->interrupted) return DOUBLE_SINGLE_TAP;
    else if (state->pressed) return DOUBLE_HOLD;
    else return DOUBLE_TAP;
  }
  //Assumes no one is trying to type the same letter three times (at least not quickly).
  //If your tap dance key is 'KC_W', and you want to type "www." quickly - then you will need to add
  //an exception here to return a 'TRIPLE_SINGLE_TAP', and define that enum just like 'DOUBLE_SINGLE_TAP'
  if (state->count == 3) {
    if (state->interrupted || !state->pressed)  return TRIPLE_TAP;
    else return TRIPLE_HOLD;
  }
  else return 8; //magic number. At some point this method will expand to work for more presses
}

//instanalize an instance of 'tap' for the 'x' tap dance.
static tap lsfttap_state = {
  .is_press_action = true,
  .state = 0
};

static tap L1_state = {
  .is_press_action = true,
  .state = 0
};

static tap L2_state = {
  .is_press_action = true,
  .state = 0
};

void lsft_finished (qk_tap_dance_state_t *state, void *user_data) {
  lsfttap_state.state = cur_dance(state);
  switch (lsfttap_state.state) {
    case SINGLE_TAP: register_code(KC_NUBS); break;
    case SINGLE_HOLD: register_code(KC_LSFT); break;
    case DOUBLE_TAP: register_code(KC_CAPS); break;
    case DOUBLE_HOLD: register_code(KC_LSFT); break;
    case DOUBLE_SINGLE_TAP: register_code(KC_NUBS); unregister_code(KC_NUBS); register_code(KC_NUBS); break;
    //Last case is for fast typing. Assuming your key is `f`:
    //For example, when typing the word `buffer`, and you want to make sure that you send `ff` and not `Esc`.
    //In order to type `ff` when typing fast, the next character will have to be hit within the `TAPPING_TERM`, which by default is 200ms.
  }
}

void lsft_reset (qk_tap_dance_state_t *state, void *user_data) {
  switch (lsfttap_state.state) {
    case SINGLE_TAP: unregister_code(KC_NUBS); break;
    case SINGLE_HOLD: unregister_code(KC_LSFT); break;
    case DOUBLE_TAP: unregister_code(KC_CAPS); break;
    case DOUBLE_HOLD: unregister_code(KC_LSFT); break;
    case DOUBLE_SINGLE_TAP: unregister_code(KC_NUBS); break;
  }
  lsfttap_state.state = 0;
}

void L1_finished (qk_tap_dance_state_t *state, void *user_data) {
  L1_state.state = cur_dance(state);
  switch (L1_state.state) {
    case SINGLE_TAP: register_code(KC_RALT); register_code(KC_LBRC); break;
    case SINGLE_HOLD: layer_on(_RGB); break;
    case DOUBLE_TAP: register_code(KC_RALT); register_code(KC_QUOT); break;
    case DOUBLE_HOLD: break;
    case DOUBLE_SINGLE_TAP: register_code(KC_RALT); register_code(KC_QUOT); break;
  }
}

void L1_reset (qk_tap_dance_state_t *state, void *user_data) {
  switch (L1_state.state) {
    case SINGLE_TAP: unregister_code(KC_LBRC); unregister_code(KC_RALT); break;
    case SINGLE_HOLD: layer_off(_RGB); break;
    case DOUBLE_TAP:  unregister_code(KC_QUOT); unregister_code(KC_RALT); break;
    case DOUBLE_HOLD: break;
    case DOUBLE_SINGLE_TAP: unregister_code(KC_QUOT); unregister_code(KC_RALT); break; 
  }
  L1_state.state = 0;
}

// Functions that control what our tap dance key does
void L2_finished (qk_tap_dance_state_t *state, void *user_data) {
  L2_state.state = cur_dance(state);
  switch (L2_state.state) {
    case SINGLE_TAP:
      tap_code16(LCTL(LALT(KC_RBRC)));
      break;
    case SINGLE_HOLD:
      layer_on(_NUMPAD);
      break;
    case DOUBLE_TAP:
      tap_code16(LCTL(LALT(KC_NUHS)));
      break;
    case TRIPLE_TAP:
      // check to see if the layer is already set
      if (layer_state_is(_NUMPAD)) {
        // if already set, then switch it off
        layer_off(_NUMPAD);
      } else {
        // if not already set, then switch the layer on
        layer_on(_NUMPAD);
      }
      break;
  }
}

void L2_reset (qk_tap_dance_state_t *state, void *user_data) {
  // If the key was held down and now is released then switch off the layer
  if (L2_state.state==SINGLE_HOLD) {
      layer_off(_NUMPAD);
  }
  L2_state.state = 0;
}

qk_tap_dance_action_t tap_dance_actions[] = {
  [SFT_CAP_PLUS]     = ACTION_TAP_DANCE_FN_ADVANCED(NULL,lsft_finished, lsft_reset),
  [TD_N_NY] = ACTION_TAP_DANCE_DOUBLE(KC_N, KC_SCLN),
  [L1] = ACTION_TAP_DANCE_FN_ADVANCED(NULL,L1_finished, L1_reset),
  [L2] = ACTION_TAP_DANCE_FN_ADVANCED(NULL,L2_finished, L2_reset)
};

bool process_record_user(uint16_t keycode, keyrecord_t *record) {
  switch (keycode) {
    case LOWER:
      if (record->event.pressed) {
        layer_on(_LOWER);
        update_tri_layer(_LOWER, _RAISE, _MACRO);
      } else {
        layer_off(_LOWER);
        update_tri_layer(_LOWER, _RAISE, _MACRO);
      }
      return false;
      break;
    case RAISE:
      if (record->event.pressed) {
        layer_on(_RAISE);
        update_tri_layer(_LOWER, _RAISE, _MACRO);
      } else {
        layer_off(_RAISE);
        update_tri_layer(_LOWER, _RAISE, _MACRO);
      }
      return false;
      break;
  }
  return true;
}
